<div class="main-container">
  <!-- Left Sidebar -->
  <div class="sidebar">
    <div class="sidebar-content">
      <button class="sidebar-button active">
        <i class="fas fa-history"></i>
        <span>History</span>
      </button>
      <!-- Additional sidebar buttons could go here -->
    </div>
  </div>

  <!-- Vertical Divider -->
  <div class="divider"></div>

  <!-- Right Main Content -->
  <div class="content-area">
    <div class="header">
      <h2>Chat History</h2>
      
      <div class="filter-controls">
        <!-- Search Box -->
        <div class="search-container">
          <input type="text" placeholder="Search conversations..." [(ngModel)]="searchQuery" 
                 (input)="applyFilters()">
          <i class="fas fa-search"></i>
        </div>
        
        <!-- Filter By Dropdown -->
        <div class="dropdown filter-dropdown">
          <button (click)="toggleFilterDropdown()" class="dropdown-btn">
            Filter by: {{selectedFilter}}
            <i class="fas fa-chevron-down"></i>
          </button>
          <div [class.show]="showFilterDropdown" class="dropdown-content">
            <a (click)="selectFilter('All')">All</a>
            <a (click)="selectFilter('Texts')">Texts</a>
            <a (click)="selectFilter('Images')">Images</a>
            <a (click)="selectFilter('Date')">Date</a>
          </div>
        </div>
        
        <!-- Date Picker (conditionally shown) -->
        <div *ngIf="selectedFilter === 'Date'" class="date-picker">
          <input type="date" [(ngModel)]="filterDate" (change)="applyFilters()">
        </div>
        
        <!-- Sort By Dropdown -->
        <div class="dropdown sort-dropdown">
          <button (click)="toggleSortDropdown()" class="dropdown-btn">
            Sort by: 
            <span *ngIf="sortOrder === 'asc'">Time <i class="fas fa-arrow-up"></i></span>
            <span *ngIf="sortOrder === 'desc'">Time <i class="fas fa-arrow-down"></i></span>
          </button>
          <div [class.show]="showSortDropdown" class="dropdown-content">
            <a (click)="selectSort('asc')">Time <i class="fas fa-arrow-up"></i></a>
            <a (click)="selectSort('desc')">Time <i class="fas fa-arrow-down"></i></a>
          </div>
        </div>
      </div>
    </div>

    <!-- Chat List -->
    <div class="chat-list">
      <div *ngFor="let chat of filteredChats" class="chat-card">
        <!-- Chat Timestamp -->
        <div class="chat-timestamp">
          {{chat.timestamp | date:'MMM d, yyyy, h:mm a'}}
        </div>
        
        <!-- Chat Content -->
        <div class="chat-content">
          <div class="message user-message" *ngIf="chat.userMessage">
            {{chat.userMessage}}
          </div>
          <div class="message bot-message" *ngIf="chat.botMessage">
            {{chat.botMessage}}
          </div>
          <div *ngIf="chat.hasImage" class="chat-image">
            <img [src]="chat.imageUrl" alt="Chat image">
          </div>
        </div>
        
        <!-- Chat Actions -->
        <div class="chat-actions">
          <button class="action-btn" (click)="copyChat(chat)" title="Copy">
            <i class="fas fa-copy"></i>
          </button>
          <button class="action-btn" (click)="saveChat(chat)" title="Save">
            <i class="fas fa-save"></i>
          </button>
          <button class="action-btn" (click)="deleteChat(chat)" title="Delete">
            <i class="fas fa-trash"></i>
          </button>
          <button class="action-btn" (click)="editChat(chat)" title="Edit">
            <i class="fas fa-edit"></i>
          </button>
          <button class="action-btn" (click)="startOverChat(chat)" title="Start Over">
            <i class="fas fa-redo"></i>
          </button>
        </div>
      </div>
      
      <div *ngIf="filteredChats.length === 0" class="no-chats">
        No chat history found.
      </div>
    </div>
  </div>
</div>


/* Main container styles */
.main-container {
  display: flex;
  min-height: 100vh;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: #f5f7fa;
}

/* Sidebar styles */
.sidebar {
  width: 250px;
  background-color: #222;
  color: #fff;
  transition: width 0.3s;
  
  .sidebar-content {
    padding: 20px 0;
  }
  
  .sidebar-button {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 12px 20px;
    background: none;
    border: none;
    color: #fff;
    text-align: left;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.2s;
    
    i {
      margin-right: 12px;
      font-size: 18px;
    }
    
    &:hover {
      background-color: rgba(255, 255, 255, 0.1);
    }
    
    &.active {
      background-color: rgba(79, 123, 239, 0.3);
      border-left: 4px solid #4f7bef;
    }
  }
}

/* Vertical divider */
.divider {
  width: 1px;
  background-color: #ddd;
}

/* Main content area */
.content-area {
  flex: 1;
  padding: 20px;
}

/* Header styles */
.header {
  background-color: #fff;
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  
  h2 {
    margin: 0 0 20px 0;
    color: #4f7bef;
    font-size: 24px;
  }
}

/* Filter controls container */
.filter-controls {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  align-items: center;
}

/* Search container */
.search-container {
  flex: 1;
  min-width: 200px;
  position: relative;
  
  input {
    width: 100%;
    padding: 10px 40px 10px 15px;
    border-radius: 20px;
    border: 1px solid #ddd;
    font-size: 14px;
    
    &:focus {
      outline: none;
      border-color: #4f7bef;
    }
  }
  
  i {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    color: #999;
  }
}

/* Dropdown styles */
.dropdown {
  position: relative;
  min-width: 150px;
  
  .dropdown-btn {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    
    i {
      margin-left: 10px;
    }
  }
  
  .dropdown-content {
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    display: none;
    min-width: 100%;
    background-color: #fff;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    margin-top: 5px;
    
    &.show {
      display: block;
      animation: fadeIn 0.2s;
    }
    
    a {
      display: block;
      padding: 10px 15px;
      text-decoration: none;
      color: #333;
      cursor: pointer;
      
      &:hover {
        background-color: #f5f5f5;
      }
    }
  }
}

/* Date picker styles */
.date-picker {
  input {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
  }
}

/* Chat list styles */
.chat-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

/* Chat card */
.chat-card {
  background-color: #fff;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  
  .chat-timestamp {
    padding: 10px 15px;
    background-color: #f8f9fb;
    color: #666;
    font-size: 13px;
    border-bottom: 1px solid #eee;
  }
  
  .chat-content {
    padding: 15px;
    
    .message {
      padding: 10px 15px;
      border-radius: 18px;
      margin-bottom: 10px;
      max-width: 80%;
    }
    
    .user-message {
      background-color: #4f7bef;
      color: white;
      align-self: flex-end;
      margin-left: auto;
      border-bottom-right-radius: 4px;
    }
    
    .bot-message {
      background-color: #f0f2f5;
      color: #333;
      align-self: flex-start;
      border-bottom-left-radius: 4px;
    }
    
    .chat-image {
      margin-top: 10px;
      
      img {
        max-width: 100%;
        border-radius: 8px;
      }
    }
  }
  
  .chat-actions {
    display: flex;
    padding: 10px 15px;
    background-color: #f8f9fb;
    border-top: 1px solid #eee;
    
    .action-btn {
      background: none;
      border: none;
      padding: 8px 10px;
      margin-right: 5px;
      cursor: pointer;
      border-radius: 4px;
      color: #666;
      
      &:hover {
        background-color: #eee;
        color: #4f7bef;
      }
      
      i {
        font-size: 16px;
      }
    }
  }
}

/* Empty state */
.no-chats {
  padding: 40px;
  text-align: center;
  background-color: #fff;
  border-radius: 10px;
  color: #999;
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .main-container {
    flex-direction: column;
  }
  
  .sidebar {
    width: 100%;
    min-height: auto;
  }
  
  .divider {
    display: none;
  }
  
  .filter-controls {
    flex-direction: column;
    align-items: stretch;
    
    .search-container {
      margin-bottom: 10px;
    }
  }
}


import { Component, OnInit } from '@angular/core';

// Chat item interface
interface ChatItem {
  id: string;
  timestamp: Date;
  userMessage?: string;
  botMessage?: string;
  hasImage: boolean;
  imageUrl?: string;
}

@Component({
  selector: 'app-history',
  templateUrl: './history.component.html',
  styleUrls: ['./history.component.scss']
})
export class HistoryComponent implements OnInit {
  // Search and filter state
  searchQuery: string = '';
  selectedFilter: string = 'All';
  sortOrder: 'asc' | 'desc' = 'desc'; // Default newest first
  filterDate: string = '';
  
  // UI state
  showFilterDropdown: boolean = false;
  showSortDropdown: boolean = false;
  
  // Chat data
  allChats: ChatItem[] = [];
  filteredChats: ChatItem[] = [];

  constructor() { }

  ngOnInit(): void {
    // Load sample data
    this.loadChatHistory();
    // Apply initial filtering
    this.applyFilters();
  }

  // Load chat history data (replace with actual API call in production)
  loadChatHistory(): void {
    this.allChats = [
      {
        id: '1',
        timestamp: new Date('2025-05-16T10:30:00'),
        userMessage: 'How can I improve my website performance?',
        botMessage: 'To improve website performance, consider optimizing images, implementing lazy loading, minifying CSS and JavaScript, using browser caching, and utilizing a Content Delivery Network (CDN).',
        hasImage: false
      },
      {
        id: '2',
        timestamp: new Date('2025-05-15T14:22:00'),
        userMessage: 'Can you show me a chart of monthly sales?',
        botMessage: 'Here is your sales chart for the past 6 months:',
        hasImage: true,
        imageUrl: 'assets/images/sales-chart.png'
      },
      {
        id: '3',
        timestamp: new Date('2025-05-14T09:15:00'),
        userMessage: 'What are the best practices for SEO in 2025?',
        botMessage: 'The best SEO practices for 2025 include focusing on mobile optimization, improving page speed, creating high-quality content, optimizing for voice search, and ensuring technical SEO fundamentals are in place.',
        hasImage: false
      }
    ];
  }

  // Toggle filter dropdown visibility
  toggleFilterDropdown(): void {
    this.showFilterDropdown = !this.showFilterDropdown;
    if (this.showFilterDropdown) {
      this.showSortDropdown = false;
    }
  }

  // Toggle sort dropdown visibility
  toggleSortDropdown(): void {
    this.showSortDropdown = !this.showSortDropdown;
    if (this.showSortDropdown) {
      this.showFilterDropdown = false;
    }
  }

  // Select a filter option
  selectFilter(filter: string): void {
    this.selectedFilter = filter;
    this.showFilterDropdown = false;
    this.applyFilters();
  }

  // Select a sort order
  selectSort(order: 'asc' | 'desc'): void {
    this.sortOrder = order;
    this.showSortDropdown = false;
    this.applyFilters();
  }

  // Apply all filters and sorting
  applyFilters(): void {
    let filtered = [...this.allChats];

    // Apply search filter if query exists
    if (this.searchQuery) {
      const query = this.searchQuery.toLowerCase();
      filtered = filtered.filter(chat => 
        (chat.userMessage && chat.userMessage.toLowerCase().includes(query)) ||
        (chat.botMessage && chat.botMessage.toLowerCase().includes(query))
      );
    }

    // Apply content type filter
    switch (this.selectedFilter) {
      case 'Texts':
        filtered = filtered.filter(chat => !chat.hasImage);
        break;
      case 'Images':
        filtered = filtered.filter(chat => chat.hasImage);
        break;
      case 'Date':
        if (this.filterDate) {
          const selectedDate = new Date(this.filterDate).toDateString();
          filtered = filtered.filter(chat => 
            chat.timestamp.toDateString() === selectedDate
          );
        }
        break;
    }

    // Apply sorting
    filtered.sort((a, b) => {
      if (this.sortOrder === 'asc') {
        return a.timestamp.getTime() - b.timestamp.getTime();
      } else {
        return b.timestamp.getTime() - a.timestamp.getTime();
      }
    });

    this.filteredChats = filtered;
  }

  // Chat action methods
  copyChat(chat: ChatItem): void {
    const content = `User: ${chat.userMessage || ''}\nBot: ${chat.botMessage || ''}`;
    navigator.clipboard.writeText(content)
      .then(() => {
        this.showNotification('Chat copied to clipboard');
      })
      .catch(err => {
        console.error('Failed to copy chat: ', err);
        this.showNotification('Failed to copy chat to clipboard');
      });
  }

  saveChat(chat: ChatItem): void {
    // Create text content
    const content = `User: ${chat.userMessage || ''}\nBot: ${chat.botMessage || ''}`;
    
    // Create a blob and download link
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `chat-${chat.id}-${new Date().toISOString().slice(0, 10)}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    this.showNotification('Chat saved to file');
  }

  deleteChat(chat: ChatItem): void {
    if (confirm('Are you sure you want to delete this chat?')) {
      this.allChats = this.allChats.filter(c => c.id !== chat.id);
      this.applyFilters();
      this.showNotification('Chat deleted successfully');
    }
  }

  editChat(chat: ChatItem): void {
    // This would typically open a modal or navigate to an edit page
    // For now, just show a notification
    this.showNotification('Edit feature coming soon');
  }

  startOverChat(chat: ChatItem): void {
    // This would typically start a new chat with the same initial message
    // For now, just show a notification
    this.showNotification('Starting a new conversation with the same context');
  }

  // Helper method to show notifications (could use a service in a real app)
  private showNotification(message: string): void {
    // Simple implementation - replace with Angular Material snackbar or similar
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.style.position = 'fixed';
    notification.style.bottom = '20px';
    notification.style.right = '20px';
    notification.style.padding = '10px 20px';
    notification.style.backgroundColor = '#4f7bef';
    notification.style.color = 'white';
    notification.style.borderRadius = '4px';
    notification.style.zIndex = '1000';
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 3000);
  }
}

