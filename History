/* Make sure dropdowns show properly */
.dropdown-content.show {
  display: block !important;
  animation: fadeIn 0.2s;
}

/* Improve chat styling */
.chat-card {
  background-color: #fff;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  margin-bottom: 15px;
}

.chat-timestamp {
  padding: 10px 15px;
  background-color: #f8f9fb;
  color: #666;
  font-size: 13px;
  border-bottom: 1px solid #eee;
}

.chat-content {
  padding: 15px;
}

.user-message {
  background-color: #4f7bef;
  color: white;
  padding: 10px 15px;
  border-radius: 18px;
  border-bottom-right-radius: 4px;
  margin-bottom: 10px;
  margin-left: auto;
  max-width: 80%;
  display: inline-block;
  float: right;
  clear: both;
}

.bot-message {
  background-color: #f0f2f5;
  color: #333;
  padding: 10px 15px;
  border-radius: 18px;
  border-bottom-left-radius: 4px;
  margin-bottom: 10px;
  max-width: 80%;
  display: inline-block;
  float: left;
  clear: both;
}

.chat-image {
  margin-top: 10px;
  clear: both;
}

.chat-image img {
  max-width: 100%;
  border-radius: 8px;
}

.chat-actions {
  display: flex;
  padding: 10px 15px;
  background-color: #f8f9fb;
  border-top: 1px solid #eee;
}

.action-btn {
  background: none;
  border: none;
  padding: 8px 10px;
  margin-right: 5px;
  cursor: pointer;
  border-radius: 4px;
  color: #666;
}

.action-btn:hover {
  background-color: #eee;
  color: #4f7bef;
}


<div class="main-container">
  <!-- Left Sidebar -->
  <div class="sidebar">
    <div class="sidebar-content">
      <button class="sidebar-button active">
        <i class="fas fa-history"></i>
        <span>History</span>
      </button>
      <!-- Additional sidebar buttons could go here -->
    </div>
  </div>

  <!-- Vertical Divider -->
  <div class="divider"></div>

  <!-- Right Main Content -->
  <div class="content-area">
    <div class="header">
      <h2>Chat History</h2>
      
      <div class="filter-controls">
        <!-- Search Box -->
        <div class="search-container">
          <input type="text" placeholder="Search conversations..." [(ngModel)]="searchQuery" 
                 (input)="applyFilters()">
          <i class="fas fa-search"></i>
        </div>
        
        <!-- Filter By Dropdown -->
        <div class="dropdown filter-dropdown">
          <button (click)="toggleFilterDropdown()" class="dropdown-btn">
            Filter by: {{selectedFilter}}
            <i class="fas fa-chevron-down"></i>
          </button>
          <div [class.show]="showFilterDropdown" class="dropdown-content">
            <a (click)="selectFilter('All')">All</a>
            <a (click)="selectFilter('Texts')">Texts</a>
            <a (click)="selectFilter('Images')">Images</a>
            <a (click)="selectFilter('Date')">Date</a>
          </div>
        </div>
        
        <!-- Date Picker (conditionally shown) -->
        <div *ngIf="selectedFilter === 'Date'" class="date-picker">
          <input type="date" [(ngModel)]="filterDate" (change)="applyFilters()">
        </div>
        
        <!-- Sort By Dropdown -->
        <div class="dropdown sort-dropdown">
          <button (click)="toggleSortDropdown()" class="dropdown-btn">
            Sort by: 
            <span *ngIf="sortOrder === 'asc'">Time <i class="fas fa-arrow-up"></i></span>
            <span *ngIf="sortOrder === 'desc'">Time <i class="fas fa-arrow-down"></i></span>
          </button>
          <div [class.show]="showSortDropdown" class="dropdown-content">
            <a (click)="selectSort('asc')">Time <i class="fas fa-arrow-up"></i></a>
            <a (click)="selectSort('desc')">Time <i class="fas fa-arrow-down"></i></a>
          </div>
        </div>
      </div>
    </div>

    <!-- Chat List -->
    <div class="chat-list">
      <div *ngFor="let chat of filteredChats" class="chat-card">
        <!-- Chat Timestamp -->
        <div class="chat-timestamp">
          {{chat.timestamp | date:'MMM d, yyyy, h:mm a'}}
        </div>
        
        <!-- Chat Content -->
        <div class="chat-content">
          <div class="message user-message" *ngIf="chat.userMessage">
            {{chat.userMessage}}
          </div>
          <div class="message bot-message" *ngIf="chat.botMessage">
            {{chat.botMessage}}
          </div>
          <div *ngIf="chat.hasImage" class="chat-image">
            <img [src]="chat.imageUrl" alt="Chat image">
          </div>
        </div>
        
        <!-- Chat Actions -->
        <div class="chat-actions">
          <button class="action-btn" (click)="copyChat(chat)" title="Copy">
            <i class="fas fa-copy"></i>
          </button>
          <button class="action-btn" (click)="saveChat(chat)" title="Save">
            <i class="fas fa-save"></i>
          </button>
          <button class="action-btn" (click)="deleteChat(chat)" title="Delete">
            <i class="fas fa-trash"></i>
          </button>
          <button class="action-btn" (click)="editChat(chat)" title="Edit">
            <i class="fas fa-edit"></i>
          </button>
          <button class="action-btn" (click)="startOverChat(chat)" title="Start Over">
            <i class="fas fa-redo"></i>
          </button>
        </div>
      </div>
      
      <div *ngIf="filteredChats.length === 0" class="no-chats">
        No chat history found.
      </div>
    </div>
  </div>
</div>


/* Main container styles */
.main-container {
  display: flex;
  min-height: 100vh;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: #f5f7fa;
}

/* Sidebar styles */
.sidebar {
  width: 250px;
  background-color: #222;
  color: #fff;
  transition: width 0.3s;
  
  .sidebar-content {
    padding: 20px 0;
  }
  
  .sidebar-button {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 12px 20px;
    background: none;
    border: none;
    color: #fff;
    text-align: left;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.2s;
    
    i {
      margin-right: 12px;
      font-size: 18px;
    }
    
    &:hover {
      background-color: rgba(255, 255, 255, 0.1);
    }
    
    &.active {
      background-color: rgba(79, 123, 239, 0.3);
      border-left: 4px solid #4f7bef;
    }
  }
}

/* Vertical divider */
.divider {
  width: 1px;
  background-color: #ddd;
}

/* Main content area */
.content-area {
  flex: 1;
  padding: 20px;
}

/* Header styles */
.header {
  background-color: #fff;
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  
  h2 {
    margin: 0 0 20px 0;
    color: #4f7bef;
    font-size: 24px;
  }
}

/* Filter controls container */
.filter-controls {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  align-items: center;
}

/* Search container */
.search-container {
  flex: 1;
  min-width: 200px;
  position: relative;
  
  input {
    width: 100%;
    padding: 10px 40px 10px 15px;
    border-radius: 20px;
    border: 1px solid #ddd;
    font-size: 14px;
    
    &:focus {
      outline: none;
      border-color: #4f7bef;
    }
  }
  
  i {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    color: #999;
  }
}

/* Dropdown styles */
.dropdown {
  position: relative;
  min-width: 150px;
  
  .dropdown-btn {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    
    i {
      margin-left: 10px;
    }
  }
  
  .dropdown-content {
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    display: none;
    min-width: 100%;
    background-color: #fff;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    margin-top: 5px;
    
    &.show {
      display: block;
      animation: fadeIn 0.2s;
    }
    
    a {
      display: block;
      padding: 10px 15px;
      text-decoration: none;
      color: #333;
      cursor: pointer;
      
      &:hover {
        background-color: #f5f5f5;
      }
    }
  }
}

/* Date picker styles */
.date-picker {
  input {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
  }
}

/* Chat list styles */
.chat-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

/* Chat card */
.chat-card {
  background-color: #fff;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  
  .chat-timestamp {
    padding: 10px 15px;
    background-color: #f8f9fb;
    color: #666;
    font-size: 13px;
    border-bottom: 1px solid #eee;
  }
  
  .chat-content {
    padding: 15px;
    
    .message {
      padding: 10px 15px;
      border-radius: 18px;
      margin-bottom: 10px;
      max-width: 80%;
    }
    
    .user-message {
      background-color: #4f7bef;
      color: white;
      align-self: flex-end;
      margin-left: auto;
      border-bottom-right-radius: 4px;
    }
    
    .bot-message {
      background-color: #f0f2f5;
      color: #333;
      align-self: flex-start;
      border-bottom-left-radius: 4px;
    }
    
    .chat-image {
      margin-top: 10px;
      
      img {
        max-width: 100%;
        border-radius: 8px;
      }
    }
  }
  
  .chat-actions {
    display: flex;
    padding: 10px 15px;
    background-color: #f8f9fb;
    border-top: 1px solid #eee;
    
    .action-btn {
      background: none;
      border: none;
      padding: 8px 10px;
      margin-right: 5px;
      cursor: pointer;
      border-radius: 4px;
      color: #666;
      
      &:hover {
        background-color: #eee;
        color: #4f7bef;
      }
      
      i {
        font-size: 16px;
      }
    }
  }
}

/* Empty state */
.no-chats {
  padding: 40px;
  text-align: center;
  background-color: #fff;
  border-radius: 10px;
  color: #999;
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .main-container {
    flex-direction: column;
  }
  
  .sidebar {
    width: 100%;
    min-height: auto;
  }
  
  .divider {
    display: none;
  }
  
  .filter-controls {
    flex-direction: column;
    align-items: stretch;
    
    .search-container {
      margin-bottom: 10px;
    }
  }
}

import { Component } from '@angular/core';

interface Chat {
  id: number;
  timestamp: Date;
  userMessage?: string;
  botMessage?: string;
  hasImage?: boolean;
  imageUrl?: string;
}

@Component({
  selector: 'app-chat-history',
  templateUrl: './chat-history.component.html',
  styleUrls: ['./chat-history.component.scss']
})
export class ChatHistoryComponent {
  // Data source (replace with your own)
  chats: Chat[] = [
    {
      id: 1,
      timestamp: new Date('2025-05-16T10:00:00'),
      userMessage: 'Hello!',
      botMessage: 'Hi there! How can I help you?',
    },
    {
      id: 2,
      timestamp: new Date('2025-05-16T10:05:00'),
      userMessage: 'Show me a cat picture.',
      botMessage: 'Here is a cat!',
      hasImage: true,
      imageUrl: 'https://placekitten.com/200/200'
    },
    // ... more chats
  ];

  // UI State
  searchQuery: string = '';
  selectedFilter: string = 'All';
  filterDate: string = '';
  sortOrder: 'asc' | 'desc' = 'desc';

  showFilterDropdown = false;
  showSortDropdown = false;

  filteredChats: Chat[] = [];

  constructor() {
    this.applyFilters();
  }

  // Filtering and sorting logic
  applyFilters(): void {
    let filtered = [...this.chats];

    // Filter by search query
    if (this.searchQuery.trim()) {
      const q = this.searchQuery.toLowerCase();
      filtered = filtered.filter(chat =>
        (chat.userMessage && chat.userMessage.toLowerCase().includes(q)) ||
        (chat.botMessage && chat.botMessage.toLowerCase().includes(q))
      );
    }

    // Filter by type
    if (this.selectedFilter === 'Texts') {
      filtered = filtered.filter(chat => !chat.hasImage);
    } else if (this.selectedFilter === 'Images') {
      filtered = filtered.filter(chat => chat.hasImage);
    } else if (this.selectedFilter === 'Date' && this.filterDate) {
      const selected = new Date(this.filterDate);
      filtered = filtered.filter(chat => {
        const chatDate = new Date(chat.timestamp);
        return (
          chatDate.getFullYear() === selected.getFullYear() &&
          chatDate.getMonth() === selected.getMonth() &&
          chatDate.getDate() === selected.getDate()
        );
      });
    }

    // Sort by time
    filtered.sort((a, b) => {
      if (this.sortOrder === 'asc') {
        return a.timestamp.getTime() - b.timestamp.getTime();
      } else {
        return b.timestamp.getTime() - a.timestamp.getTime();
      }
    });

    this.filteredChats = filtered;
  }

  // Dropdown controls
  toggleFilterDropdown(): void {
    this.showFilterDropdown = !this.showFilterDropdown;
  }

  selectFilter(filter: string): void {
    this.selectedFilter = filter;
    this.showFilterDropdown = false;
    // Reset date filter if not filtering by date
    if (filter !== 'Date') {
      this.filterDate = '';
    }
    this.applyFilters();
  }

  toggleSortDropdown(): void {
    this.showSortDropdown = !this.showSortDropdown;
  }

  selectSort(order: 'asc' | 'desc'): void {
    this.sortOrder = order;
    this.showSortDropdown = false;
    this.applyFilters();
  }

  // Chat actions (implement as needed)
  copyChat(chat: Chat): void {
    const text = `${chat.userMessage ? 'User: ' + chat.userMessage + '\n' : ''}${chat.botMessage ? 'Bot: ' + chat.botMessage + '\n' : ''}`;
    navigator.clipboard.writeText(text);
    alert('Chat copied to clipboard!');
  }

  saveChat(chat: Chat): void {
    // Implement actual save logic (e.g., send to backend or download as file)
    alert('Save feature not implemented.');
  }

  deleteChat(chat: Chat): void {
    if (confirm('Are you sure you want to delete this chat?')) {
      this.chats = this.chats.filter(c => c.id !== chat.id);
      this.applyFilters();
    }
  }

  editChat(chat: Chat): void {
    // Implement edit logic (show modal, etc.)
    alert('Edit feature not implemented.');
  }

  startOverChat(chat: Chat): void {
    // Implement start over logic (e.g., re-initiate chat with same context)
    alert('Start Over feature not implemented.');
  }
}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chat History</title>
  <link rel="stylesheet" href="app.css">
  <!-- Font Awesome for icons (using CDN) -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
  <div id="app"></div>
  <script src="app.js"></script>
</body>
</html>



