// Define interfaces for the chat data structure
interface Chat {
  id: number;
  timestamp: Date;
  userMessage?: string;
  botMessage?: string;
  hasImage?: boolean;
  imageUrl?: string;
}

// Main application class
class ChatHistoryApp {
  // Sample data
  private chats: Chat[] = [
    {
      id: 1,
      timestamp: new Date('2025-05-16T10:30:00'),
      userMessage: 'Hello, can you help me with my project?',
      botMessage: 'Hi there! I\'d be happy to help with your project. What do you need assistance with?',
      hasImage: false
    },
    {
      id: 2,
      timestamp: new Date('2025-05-16T11:15:00'),
      userMessage: 'Show me a sample image.',
      botMessage: 'Here\'s a sample image:',
      hasImage: true,
      imageUrl: 'https://placekitten.com/300/200'
    },
    {
      id: 3,
      timestamp: new Date('2025-05-15T14:22:00'),
      userMessage: 'How do I implement a chat interface?',
      botMessage: 'To implement a chat interface, you\'ll need HTML, CSS, and JavaScript. Start by designing the UI with message bubbles, then add functionality to send and receive messages.',
      hasImage: false
    }
  ];

  // State variables
  private filteredChats: Chat[] = [];
  private searchQuery: string = '';
  private selectedFilter: string = 'All';
  private filterDate: string = '';
  private sortOrder: 'asc' | 'desc' = 'desc';
  private showFilterDropdown: boolean = false;
  private showSortDropdown: boolean = false;

  constructor() {
    // Initialize the app when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      this.applyFilters();
      this.renderUI();
      this.setupEventListeners();
    });
  }

  // Apply filters and sorting to chat list
  private applyFilters(): void {
    let filtered = [...this.chats];

    // Apply search filter
    if (this.searchQuery.trim() !== '') {
      const query = this.searchQuery.toLowerCase();
      filtered = filtered.filter(chat => 
        (chat.userMessage && chat.userMessage.toLowerCase().includes(query)) || 
        (chat.botMessage && chat.botMessage.toLowerCase().includes(query))
      );
    }

    // Apply type filter
    if (this.selectedFilter === 'Texts') {
      filtered = filtered.filter(chat => !chat.hasImage);
    } else if (this.selectedFilter === 'Images') {
      filtered = filtered.filter(chat => chat.hasImage);
    } else if (this.selectedFilter === 'Date' && this.filterDate) {
      const filterDateObj = new Date(this.filterDate);
      filtered = filtered.filter(chat => {
        const chatDate = new Date(chat.timestamp);
        return (
          chatDate.getFullYear() === filterDateObj.getFullYear() &&
          chatDate.getMonth() === filterDateObj.getMonth() &&
          chatDate.getDate() === filterDateObj.getDate()
        );
      });
    }

    // Apply sorting
    filtered.sort((a, b) => {
      if (this.sortOrder === 'asc') {
        return a.timestamp.getTime() - b.timestamp.getTime();
      } else {
        return b.timestamp.getTime() - a.timestamp.getTime();
      }
    });

    this.filteredChats = filtered;
  }

  // Render the UI
  private renderUI(): void {
    const appDiv = document.getElementById('app');
    if (!appDiv) {
      document.body.innerHTML = `<div id="app"></div>`;
      this.renderUI();
      return;
    }

    appDiv.innerHTML = `
      <div class="main-container">
        <!-- Left Sidebar -->
        <div class="sidebar">
          <div class="sidebar-content">
            <button id="historyButton" class="sidebar-button active">
              <i class="fas fa-history"></i>
              <span>History</span>
            </button>
          </div>
        </div>

        <!-- Vertical Divider -->
        <div class="divider"></div>

        <!-- Right Main Content -->
        <div class="content-area">
          <div class="header">
            <h2>Chat History</h2>
            
            <div class="filter-controls">
              <!-- Search Box -->
              <div class="search-container">
                <input type="text" id="searchInput" placeholder="Search conversations..." value="${this.searchQuery}">
                <i class="fas fa-search"></i>
              </div>
              
              <!-- Filter By Dropdown -->
              <div class="dropdown filter-dropdown">
                <button id="filterDropdownBtn" class="dropdown-btn">
                  Filter by: ${this.selectedFilter}
                  <i class="fas fa-chevron-down"></i>
                </button>
                <div id="filterDropdownContent" class="dropdown-content ${this.showFilterDropdown ? 'show' : ''}">
                  <a href="#" data-filter="All">All</a>
                  <a href="#" data-filter="Texts">Texts</a>
                  <a href="#" data-filter="Images">Images</a>
                  <a href="#" data-filter="Date">Date</a>
                </div>
              </div>
              
              <!-- Date Picker (conditionally shown) -->
              <div id="datePicker" class="date-picker" style="display:${this.selectedFilter === 'Date' ? 'block' : 'none'};">
                <input type="date" id="dateInput" value="${this.filterDate}">
              </div>
              
              <!-- Sort By Dropdown -->
              <div class="dropdown sort-dropdown">
                <button id="sortDropdownBtn" class="dropdown-btn">
                  Sort by: 
                  <span>${this.sortOrder === 'asc' 
                    ? 'Time <i class="fas fa-arrow-up"></i>' 
                    : 'Time <i class="fas fa-arrow-down"></i>'}</span>
                </button>
                <div id="sortDropdownContent" class="dropdown-content ${this.showSortDropdown ? 'show' : ''}">
                  <a href="#" data-sort="asc">Time <i class="fas fa-arrow-up"></i></a>
                  <a href="#" data-sort="desc">Time <i class="fas fa-arrow-down"></i></a>
                </div>
              </div>
            </div>
          </div>

          <!-- Chat List -->
          <div class="chat-list" id="chatList">
            ${this.renderChatList()}
          </div>
        </div>
      </div>
    `;

    this.setupEventListeners();
  }

  // Generate HTML for chat list
  private renderChatList(): string {
    if (this.filteredChats.length === 0) {
      return '<div class="no-chats">No chat history found.</div>';
    }

    return this.filteredChats.map(chat => `
      <div class="chat-card" data-id="${chat.id}">
        <!-- Chat Timestamp -->
        <div class="chat-timestamp">
          ${chat.timestamp.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })}
        </div>
        
        <!-- Chat Content -->
        <div class="chat-content">
          ${chat.userMessage 
            ? `<div class="message user-message">${chat.userMessage}</div>` 
            : ''}
          ${chat.botMessage 
            ? `<div class="message bot-message">${chat.botMessage}</div>` 
            : ''}
          ${chat.hasImage && chat.imageUrl 
            ? `<div class="chat-image"><img src="${chat.imageUrl}" alt="Chat image"></div>` 
            : ''}
        </div>
        
        <!-- Chat Actions -->
        <div class="chat-actions">
          <button class="action-btn copy-btn" title="Copy" data-id="${chat.id}">
            <i class="fas fa-copy"></i>
          </button>
          <button class="action-btn save-btn" title="Save" data-id="${chat.id}">
            <i class="fas fa-save"></i>
          </button>
          <button class="action-btn delete-btn" title="Delete" data-id="${chat.id}">
            <i class="fas fa-trash"></i>
          </button>
          <button class="action-btn edit-btn" title="Edit" data-id="${chat.id}">
            <i class="fas fa-edit"></i>
          </button>
          <button class="action-btn startover-btn" title="Start Over" data-id="${chat.id}">
            <i class="fas fa-redo"></i>
          </button>
        </div>
      </div>
    `).join('');
  }

  // Set up all event listeners
  private setupEventListeners(): void {
    this.setupSearchListener();
    this.setupFilterDropdown();
    this.setupDateFilter();
    this.setupSortDropdown();
    this.setupActionButtons();
    this.setupClickOutside();
  }

  // Search functionality
  private setupSearchListener(): void {
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    if (searchInput) {
      searchInput.addEventListener('input', (e: Event) => {
        const target = e.target as HTMLInputElement;
        this.searchQuery = target.value;
        this.applyFilters();
        this.updateChatList();
      });
    }
  }

  // Filter dropdown functionality
  private setupFilterDropdown(): void {
    const filterBtn = document.getElementById('filterDropdownBtn');
    const filterContent = document.getElementById('filterDropdownContent');
    
    if (filterBtn) {
      filterBtn.addEventListener('click', (e: Event) => {
        e.preventDefault();
        this.showFilterDropdown = !this.showFilterDropdown;
        if (filterContent) {
          filterContent.classList.toggle('show', this.showFilterDropdown);
        }
        
        // Close sort dropdown if open
        if (this.showFilterDropdown && this.showSortDropdown) {
          this.showSortDropdown = false;
          const sortContent = document.getElementById('sortDropdownContent');
          if (sortContent) {
            sortContent.classList.remove('show');
          }
        }
      });
    }
    
    if (filterContent) {
      const filterLinks = filterContent.querySelectorAll('a');
      filterLinks.forEach(link => {
        link.addEventListener('click', (e: Event) => {
          e.preventDefault();
          const target = e.currentTarget as HTMLElement;
          const filter = target.getAttribute('data-filter');
          
          if (filter) {
            this.selectedFilter = filter;
            this.showFilterDropdown = false;
            
            // Update filter button text
            const filterBtnText = document.getElementById('filterDropdownBtn');
            if (filterBtnText) {
              filterBtnText.innerHTML = `Filter by: ${filter} <i class="fas fa-chevron-down"></i>`;
            }
            
            // Show/hide date picker
            const datePicker = document.getElementById('datePicker');
            if (datePicker) {
              datePicker.style.display = filter === 'Date' ? 'block' : 'none';
            }
            
            // Remove .show class
            if (filterContent) {
              filterContent.classList.remove('show');
            }
            
            // Apply filters and update UI
            this.applyFilters();
            this.updateChatList();
          }
        });
      });
    }
  }

  // Date filter functionality
  private setupDateFilter(): void {
    const dateInput = document.getElementById('dateInput') as HTMLInputElement;
    if (dateInput) {
      dateInput.addEventListener('change', (e: Event) => {
        const target = e.target as HTMLInputElement;
        this.filterDate = target.value;
        this.applyFilters();
        this.updateChatList();
      });
    }
  }

  // Sort dropdown functionality
  private setupSortDropdown(): void {
    const sortBtn = document.getElementById('sortDropdownBtn');
    const sortContent = document.getElementById('sortDropdownContent');
    
    if (sortBtn) {
      sortBtn.addEventListener('click', (e: Event) => {
        e.preventDefault();
        this.showSortDropdown = !this.showSortDropdown;
        if (sortContent) {
          sortContent.classList.toggle('show', this.showSortDropdown);
        }
        
        // Close filter dropdown if open
        if (this.showSortDropdown && this.showFilterDropdown) {
          this.showFilterDropdown = false;
          const filterContent = document.getElementById('filterDropdownContent');
          if (filterContent) {
            filterContent.classList.remove('show');
          }
        }
      });
    }
    
    if (sortContent) {
      const sortLinks = sortContent.querySelectorAll('a');
      sortLinks.forEach(link => {
        link.addEventListener('click', (e: Event) => {
          e.preventDefault();
          const target = e.currentTarget as HTMLElement;
          const sort = target.getAttribute('data-sort') as 'asc' | 'desc';
          
          if (sort) {
            this.sortOrder = sort;
            this.showSortDropdown = false;
            
            // Update sort button text
            const sortBtnText = document.getElementById('sortDropdownBtn');
            if (sortBtnText) {
              sortBtnText.innerHTML = `
                Sort by: 
                <span>${sort === 'asc' 
                  ? 'Time <i class="fas fa-arrow-up"></i>' 
                  : 'Time <i class="fas fa-arrow-down"></i>'}</span>
              `;
            }
            
            // Remove .show class
            if (sortContent) {
              sortContent.classList.remove('show');
            }
            
            // Apply filters and update UI
            this.applyFilters();
            this.updateChatList();
          }
        });
      });
    }
  }

  // Setup action buttons on each chat card
  private setupActionButtons(): void {
    // Copy button
    document.querySelectorAll('.copy-btn').forEach(btn => {
      btn.addEventListener('click', (e: Event) => {
        const target = e.currentTarget as HTMLElement;
        const chatId = Number(target.getAttribute('data-id'));
        this.copyChat(chatId);
      });
    });
    
    // Save button
    document.querySelectorAll('.save-btn').forEach(btn => {
      btn.addEventListener('click', (e: Event) => {
        const target = e.currentTarget as HTMLElement;
        const chatId = Number(target.getAttribute('data-id'));
        this.saveChat(chatId);
      });
    });
    
    // Delete button
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', (e: Event) => {
        const target = e.currentTarget as HTMLElement;
        const chatId = Number(target.getAttribute('data-id'));
        this.deleteChat(chatId);
      });
    });
    
    // Edit button
    document.querySelectorAll('.edit-btn').forEach(btn => {
      btn.addEventListener('click', (e: Event) => {
        const target = e.currentTarget as HTMLElement;
        const chatId = Number(target.getAttribute('data-id'));
        this.editChat(chatId);
      });
    });
    
    // Start Over button
    document.querySelectorAll('.startover-btn').forEach(btn => {
      btn.addEventListener('click', (e: Event) => {
        const target = e.currentTarget as HTMLElement;
        const chatId = Number(target.getAttribute('data-id'));
        this.startOverChat(chatId);
      });
    });
  }

  // Close dropdowns when clicking outside
  private setupClickOutside(): void {
    document.addEventListener('click', (e: Event) => {
      const target = e.target as HTMLElement;
      
      if (!target.matches('.dropdown-btn') && !target.closest('.dropdown-btn')) {
        document.querySelectorAll('.dropdown-content').forEach(dropdown => {
          dropdown.classList.remove('show');
        });
        this.showFilterDropdown = false;
        this.showSortDropdown = false;
      }
    });
  }

  // Update chat list without re-rendering entire UI
  private updateChatList(): void {
    const chatListEl = document.getElementById('chatList');
    if (chatListEl) {
      chatListEl.innerHTML = this.renderChatList();
      this.setupActionButtons();
    }
  }

  // Copy chat content to clipboard
  private copyChat(chatId: number): void {
    const chat = this.chats.find(c => c.id === chatId);
    if (!chat) return;
    
    const text = `User: ${chat.userMessage || ''}\nBot: ${chat.botMessage || ''}`;
    navigator.clipboard.writeText(text)
      .then(() => alert('Chat copied to clipboard'))
      .catch(err => console.error('Could not copy text: ', err));
  }

  // Save chat to file
  private saveChat(chatId: number): void {
    const chat = this.chats.find(c => c.id === chatId);
    if (!chat) return;
    
    const text = `User: ${chat.userMessage || ''}\nBot: ${chat.botMessage || ''}`;
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `chat_${chatId}_${new Date().toISOString().slice(0, 10)}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert('Chat saved successfully!');
  }

  // Delete chat
  private deleteChat(chatId: number): void {
    if (confirm('Are you sure you want to delete this chat?')) {
      this.chats = this.chats.filter(c => c.id !== chatId);
      this.applyFilters();
      this.updateChatList();
    }
  }

  // Edit chat
  private editChat(chatId: number): void {
    const chat = this.chats.find(c => c.id === chatId);
    if (!chat) return;
    
    const userMsg = prompt('Edit your message:', chat.userMessage || '');
    const botMsg = prompt('Edit bot response:', chat.botMessage || '');
    
    if (userMsg !== null) chat.userMessage = userMsg;
    if (botMsg !== null) chat.botMessage = botMsg;
    
    this.applyFilters();
    this.updateChatList();
  }

  // Start over chat
  private startOverChat(chatId: number): void {
    const chat = this.chats.find(c => c.id === chatId);
    if (!chat) return;
    
    alert(`Starting over with chat #${chatId}`);
    // In a real app, you would implement the actual logic here
  }
}

// Initialize the app
const app = new ChatHistoryApp();
