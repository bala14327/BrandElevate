// Sample chat data (replace with your actual data source)
const chats = [
  {
    id: 1,
    timestamp: new Date('2025-05-16T10:00:00'),
    userMessage: 'Hello!',
    botMessage: 'Hi there! How can I help you today?',
    hasImage: false
  },
  {
    id: 2,
    timestamp: new Date('2025-05-16T10:05:00'),
    userMessage: 'Show me a cat picture.',
    botMessage: 'Here is a cat!',
    hasImage: true,
    imageUrl: 'https://placekitten.com/200/200'
  },
  {
    id: 3,
    timestamp: new Date('2025-05-15T14:30:00'),
    userMessage: 'What is the weather today?',
    botMessage: 'The weather is sunny with a temperature of 25Â°C.',
    hasImage: false
  }
];

// App state
let filteredChats = [...chats];
let searchQuery = '';
let selectedFilter = 'All';
let filterDate = '';
let sortOrder = 'desc'; // Default to descending (newest first)

// Initialize the app
function initApp() {
  renderChats();
  attachEventListeners();
}

// Format date for display
function formatDate(date) {
  const options = { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
    hour12: true
  };
  return date.toLocaleString('en-US', options);
}

// Render chats based on filters and sorting
function renderChats() {
  const chatListElement = document.getElementById('chatList');
  
  // Clear existing chats
  chatListElement.innerHTML = '';
  
  if (filteredChats.length === 0) {
    chatListElement.innerHTML = '<div class="no-chats">No chat history found.</div>';
    return;
  }
  
  // Render each chat
  filteredChats.forEach(chat => {
    const chatCard = document.createElement('div');
    chatCard.className = 'chat-card';
    
    // Format timestamp
    const formattedDate = formatDate(chat.timestamp);
    
    chatCard.innerHTML = `
      <div class="chat-timestamp">
        ${formattedDate}
      </div>
      <div class="chat-content">
        ${chat.userMessage ? `<div class="message user-message">${chat.userMessage}</div>` : ''}
        ${chat.botMessage ? `<div class="message bot-message">${chat.botMessage}</div>` : ''}
        ${chat.hasImage && chat.imageUrl ? `<div class="chat-image"><img src="${chat.imageUrl}" alt="Chat image"></div>` : ''}
      </div>
      <div class="chat-actions">
        <button class="action-btn" onclick="copyChat(${chat.id})" title="Copy">
          <i class="fas fa-copy"></i>
        </button>
        <button class="action-btn" onclick="saveChat(${chat.id})" title="Save">
          <i class="fas fa-save"></i>
        </button>
        <button class="action-btn" onclick="deleteChat(${chat.id})" title="Delete">
          <i class="fas fa-trash"></i>
        </button>
        <button class="action-btn" onclick="editChat(${chat.id})" title="Edit">
          <i class="fas fa-edit"></i>
        </button>
        <button class="action-btn" onclick="startOverChat(${chat.id})" title="Start Over">
          <i class="fas fa-redo"></i>
        </button>
      </div>
    `;
    
    chatListElement.appendChild(chatCard);
  });
}

// Apply filters and sorting
function applyFilters() {
  // Start with all chats
  filteredChats = [...chats];
  
  // Apply search filter
  if (searchQuery.trim()) {
    const query = searchQuery.toLowerCase();
    filteredChats = filteredChats.filter(chat => 
      (chat.userMessage && chat.userMessage.toLowerCase().includes(query)) || 
      (chat.botMessage && chat.botMessage.toLowerCase().includes(query))
    );
  }
  
  // Apply type filter
  if (selectedFilter === 'Texts') {
    filteredChats = filteredChats.filter(chat => !chat.hasImage);
  } else if (selectedFilter === 'Images') {
    filteredChats = filteredChats.filter(chat => chat.hasImage);
  } else if (selectedFilter === 'Date' && filterDate) {
    const selectedDate = new Date(filterDate);
    filteredChats = filteredChats.filter(chat => {
      return (
        chat.timestamp.getFullYear() === selectedDate.getFullYear() &&
        chat.timestamp.getMonth() === selectedDate.getMonth() &&
        chat.timestamp.getDate() === selectedDate.getDate()
      );
    });
  }
  
  // Apply sorting
  filteredChats.sort((a, b) => {
    if (sortOrder === 'asc') {
      return a.timestamp.getTime() - b.timestamp.getTime();
    } else {
      return b.timestamp.getTime() - a.timestamp.getTime();
    }
  });
  
  // Re-render with updated filters
  renderChats();
}

// Attach event listeners
function attachEventListeners() {
  // Search input
  const searchInput = document.getElementById('searchInput');
  searchInput.addEventListener('input', (e) => {
    searchQuery = e.target.value;
    applyFilters();
  });
  
  // Filter dropdown
  const filterDropdownBtn = document.getElementById('filterDropdownBtn');
  const filterDropdownContent = document.getElementById('filterDropdownContent');
  
  filterDropdownBtn.addEventListener('click', () => {
    filterDropdownContent.classList.toggle('show');
  });
  
  // Filter options
  const filterOptions = filterDropdownContent.querySelectorAll('a');
  filterOptions.forEach(option => {
    option.addEventListener('click', (e) => {
      selectedFilter = e.target.getAttribute('data-filter');
      document.getElementById('selectedFilter').textContent = selectedFilter;
      
      // Show/hide date picker
      const datePicker = document.getElementById('datePicker');
      if (selectedFilter === 'Date') {
        datePicker.style.display = 'block';
      } else {
        datePicker.style.display = 'none';
        filterDate = '';
      }
      
      filterDropdownContent.classList.remove('show');
      applyFilters();
    });
  });
  
  // Date picker
  const dateInput = document.getElementById('filterDate');
  dateInput.addEventListener('change', (e) => {
    filterDate = e.target.value;
    applyFilters();
  });
  
  // Sort dropdown
  const sortDropdownBtn = document.getElementById('sortDropdownBtn');
  const sortDropdownContent = document.getElementById('sortDropdownContent');
  
  sortDropdownBtn.addEventListener('click', () => {
    sortDropdownContent.classList.toggle('show');
  });
  
  // Sort options
  const sortOptions = sortDropdownContent.querySelectorAll('a');
  sortOptions.forEach(option => {
    option.addEventListener('click', (e) => {
      sortOrder = e.target.getAttribute('data-sort');
      const sortOrderDisplay = sortOrder === 'asc' 
        ? '<i class="fas fa-arrow-up"></i>' 
        : '<i class="fas fa-arrow-down"></i>';
      document.getElementById('sortOrderDisplay').innerHTML = sortOrderDisplay;
      
      sortDropdownContent.classList.remove('show');
      applyFilters();
    });
  });
  
  // Close dropdowns when clicking outside
  window.addEventListener('click', (e) => {
    if (!e.target.matches('.dropdown-btn') && !e.target.closest('.dropdown-btn')) {
      const dropdowns = document.querySelectorAll('.dropdown-content');
      dropdowns.forEach(dropdown => dropdown.classList.remove('show'));
    }
  });
}

// Chat actions
function copyChat(chatId) {
  const chat = chats.find(c => c.id === chatId);
  if (!chat) return;
  
  const text = `${chat.userMessage ? 'User: ' + chat.userMessage + '\n' : ''}${chat.botMessage ? 'Bot: ' + chat.botMessage + '\n' : ''}`;
  navigator.clipboard.writeText(text)
    .then(() => alert('Chat copied to clipboard!'))
    .catch(err => console.error('Failed to copy chat: ' + err));
}

function saveChat(chatId) {
  // Implement save functionality
  alert('Chat saved successfully!');
}

function deleteChat(chatId) {
  if (confirm('Are you sure you want to delete this chat?')) {
    const index = chats.findIndex(c => c.id === chatId);
    if (index !== -1) {
      chats.splice(index, 1);
      applyFilters();
    }
  }
}

function editChat(chatId) {
  const chat = chats.find(c => c.id === chatId);
  if (!chat) return;
  
  // Simple implementation - you can enhance this with inline editing
  const userMessage = prompt('Edit user message:', chat.userMessage);
  const botMessage = prompt('Edit bot message:', chat.botMessage);
  
  if (userMessage !== null) chat.userMessage = userMessage;
  if (botMessage !== null) chat.botMessage = botMessage;
  
  applyFilters();
}

function startOverChat(chatId) {
  // Implement start over functionality
  alert('Starting a new conversation with the same context');
}

// Initialize the app when DOM is loaded
document.addEventListener('DOMContentLoaded', initApp);
 
